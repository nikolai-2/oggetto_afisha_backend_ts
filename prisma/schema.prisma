generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id                  Int                   @id(map: "channel_pk") @unique(map: "channel_id_uindex") @default(autoincrement())
  name                String
  image               String
  text                String
  icon                String
  ChannelSubscription ChannelSubscription[]
  Event               Event[]
}

model ChannelSubscription {
  id        Int      @id(map: "channelsubscription_pk") @unique(map: "channelsubscription_id_uindex") @default(autoincrement())
  channelId Int?
  userId    String?
  Channel   Channel? @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channelsubscription_channel_id_fk")
  User      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "channelsubscription_user_id_fk")
}

model Event {
  id                Int                 @id(map: "event_pk") @unique(map: "event_id_uindex") @default(autoincrement())
  name              String
  text              String
  socialLink        String?
  startDate         DateTime            @db.Timestamptz(6)
  period            Int?
  channelId         Int?
  image             String
  endDate           DateTime?           @db.Timestamptz(6)
  place             String
  Channel           Channel?            @relation(fields: [channelId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_channel_id_fk")
  EventAssignations EventAssignations[]

  @@index([startDate], map: "start_date_index")
}

model EventAssignations {
  id      Int     @id(map: "eventassignations_pk") @unique(map: "eventassignations_id_uindex") @default(autoincrement())
  eventId Int?
  userId  String?
  Event   Event?  @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eventassignations_event_id_fk")
  User    User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "eventassignations_user_id_fk")
}

model User {
  id                  String                @id(map: "user_pk") @unique(map: "user_id_uindex")
  firstName           String
  lastName            String
  avatar              String
  accessToken         String
  ChannelSubscription ChannelSubscription[]
  EventAssignations   EventAssignations[]
}
